{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"name":"reflya.ra@gmail.com.ipynb","provenance":[{"file_id":"1GIGh3H2j-gWft9fi9JBdTAXPoIEsJS6M","timestamp":1589332473816}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"RL--OpcrmM4s","colab_type":"text"},"source":["<h1> Quiz 1 : Pemahaman Tentang Model Evaluasi</h1>\n","\n","Jawab pertanyaan di bawah ini dengan bahasa kalian masing2?\n","\n","1. Apa perbedaan antara data latih, data validasi, dan data test?\n","2. Bagaimana cara kita menilai performa suatu model?\n","3. Apa itu Confusion Matriks? Jelaskan secara lengkap!\n","4. Apa itu Classification Report dari sklearn?"]},{"cell_type":"markdown","metadata":{"id":"hfgzuCVeI2nl","colab_type":"text"},"source":["\n","\n","1.   **Data latih** merupakan data yang digunakan untuk keperluan melatih model, dengan algoritma yang dimiliki model tersebut, sehingga model tersebut belajar cara mendapatkan nilai y dengan fitur x yang telah didefinisikan sebelumnya. Sementara **data validasi** berguna untuk membantu melakukan tuning pada hyperparameter dan sangat membantu untuk mencari hyperparameter yang paling optimal yang akan digunakan nantinya. Lalu **data test** adalah data yang memiliki tujuan untuk melakukan testing kepada model yang sudah dilatih dengan data train dan dilakukan tuning dengan data validasi, sehingga didapatkan hasil akurasi dari algoritma model paling optimum.\n","\n","\n","2.   Cara untuk menilai performa cukup bervariasi, seperti yang biasanya kita pakai dalam *library metric*, dimana bagiannya itu akan ada seperti **accuracy score, roc auc score, classification report, dan confusion matrix**, sehingga kita dapat dengan cepat memahami bagaimana model kita bekerja dan apa hasil dari performa nya. karena melalui metric tadi kita bisa melihat mulai dari akurasi model kita hingga ke level confusion matrix yang dihasilkan dari model kita tadi. Jadi untuk parameter yang digunakan adalah *akurasi, f1-score, recall, dan precision*.\n","\n","\n","3.   Confusion matrix merupakan matrix yang membagi hasil dari output data yang kita buat menjadi 4 bagian, dimana bagian-bagian nya adalah **true positive** atau data yang berhasil model kita klasifikasi dengan benar dan hasilnya adalah benar, lalu **true negative** yaitu hasil yang berhasil model kita prediksi dengan salah dan hasilnya adalah salah, dan **false positive** yaitu hasil yang gagal model kita prediksi menjadi positif padahal hasilnya negatif dan **false negative** yaitu hasil yang salah model kita prediksi menjadi salah, padahal hasilnya adalah benar. Confusion matrix biasanya sangat berguna untuk menghitung nilai dari *precision*, *recall* dan *f1-score* yang membantu melihat secara jelas performa dari model kita untuk data yang negatif dan yang positif.\n","\n","\n","4.   **Classification Report** pada sklearn berguna untuk melakukan sum up atau menampilkan report dari hasil confusion matrix yang dihitung pada kasus positif dan kasus negatif. Classification report membantu kita melihat bagaimana performa dari model kita dan apakah cukup layak untuk dipergunakan nantinya.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"olZK8aqPmM4u","colab_type":"text"},"source":["<h1>Quiz 2 : Aplikasi Model Evaluasi</h1>\n","\n","Kali ini kita akan menggunakan data untuk memprediksi kelangsungan hidup pasien yang telah mengalami operasi payu dara. Dengan informasi yang dimiliki terkait pasien, kita akan membuat model untuk memprediksi apakah pasien akan bertahan hidup dalam waktu lebih dari 5 tahun atau tidak.\n","\n","Lebih Lengkapnya kalian bisa membaca informasi tentang dataset di link berikut : https://raw.githubusercontent.com/jbrownlee/Datasets/master/haberman.names\n","\n","Buat model Klasifikasi (Model/Algoritma Bebas) untuk memprediksi status pasien. dengan ketentuan sebagai berikut :\n","\n","1. Bagi kedua data ini menjadi data training dan data test dengan test_size=0.25.\n","3. Pelajar tentang metrics roc_auc_score kemudian buatlah model dan evaluasi dengan menggunakan teknik cross-validation dengan scoring 'roc_auc'. baca https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html untuk menggunakan metric roc_auc saat cross-validation.\n","3. Berapa score rata2 dari model dengan teknik cross-validation tersebut?\n","4. Prediksi data test dengan model yang telah kalian buat!\n","5. Bagaimana hasil confusion matrix dari hasil prediksi tersebut?\n","6. Bagaimana classification report dari hasil prediksi tersebut?\n","5. Seberapa baik model anda dalam memprediksi seorang pasien mempunyai status positive?\n","6. Seberapa baik model anda dalam memprediksi seorang pasien mempunyai status negatif?"]},{"cell_type":"code","metadata":{"id":"Qgquyl7zmM4w","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/haberman.csv'\n","list_cols = ['Age', \"Patient's Years\", \"N_positive_ax\", \"survival_status\"]\n","df = pd.read_csv(url, names=list_cols)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-Ib7-_-xmM45","colab_type":"code","outputId":"a0525965-defe-47c1-b711-266c49fe0dcd","executionInfo":{"status":"ok","timestamp":1589343471988,"user_tz":-420,"elapsed":2950,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["df.head()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Patient's Years</th>\n","      <th>N_positive_ax</th>\n","      <th>survival_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30</td>\n","      <td>64</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>30</td>\n","      <td>62</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>30</td>\n","      <td>65</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>31</td>\n","      <td>59</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31</td>\n","      <td>65</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Age  Patient's Years  N_positive_ax  survival_status\n","0   30               64              1                1\n","1   30               62              3                1\n","2   30               65              0                1\n","3   31               59              2                1\n","4   31               65              4                1"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"7Onezlz1mM5C","colab_type":"code","outputId":"6c6eaf4e-2ac5-4993-861f-7c055e6f4b11","executionInfo":{"status":"ok","timestamp":1589343471989,"user_tz":-420,"elapsed":1521,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["df['survival_status'].value_counts()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    225\n","2     81\n","Name: survival_status, dtype: int64"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"NdTModZymM5K","colab_type":"code","colab":{}},"source":["X = df.drop(['survival_status'], axis=1)\n","y = df['survival_status']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h9A9o6ce2IIR","colab_type":"code","outputId":"461e1ad5-6d01-4975-e103-e605262340e1","executionInfo":{"status":"ok","timestamp":1589344017909,"user_tz":-420,"elapsed":901,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["fig, ax = plt.subplots()\n","ax.scatter(y, X['Age'], label=\"Age\")\n","ax.scatter(y, X['Patient\\'s Years'], label='Years')\n","ax.scatter(y, X['N_positive_ax'], label='positive_ax')\n","\n","plt.legend()\n","\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"lmVCtlxrzZEb","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import cross_val_score\n","from sklearn import tree\n","from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report, accuracy_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import ShuffleSplit"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lOi23LcO0yUr","colab_type":"code","outputId":"e715afb3-1fce-4c25-9e50-0d79f1379a70","executionInfo":{"status":"ok","timestamp":1589344019206,"user_tz":-420,"elapsed":931,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["DTree_model = tree.DecisionTreeClassifier()\n","\n","cv = ShuffleSplit(n_splits=10, test_size=0.25, random_state=20)\n","\n","print(cross_val_score(DTree_model, X, y, cv=cv))\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, stratify=y, random_state=0)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["[0.62337662 0.61038961 0.67532468 0.67532468 0.64935065 0.66233766\n"," 0.62337662 0.67532468 0.64935065 0.62337662]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"T6qa_PcnC5F6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"58943f44-951c-43c1-c4bc-edbe0d0579b2","executionInfo":{"status":"ok","timestamp":1589344019680,"user_tz":-420,"elapsed":952,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}}},"source":["y_test.value_counts()"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    57\n","2    20\n","Name: survival_status, dtype: int64"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"sBZJibNLHmYj","colab_type":"code","colab":{}},"source":["DTree_model.fit(X_train, y_train)\n","y_pred = DTree_model.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vrIXyiJT30j8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"9f6d7472-30a6-409b-b8ac-b9df537101da","executionInfo":{"status":"ok","timestamp":1589344020880,"user_tz":-420,"elapsed":648,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}}},"source":["# Normal Accuracy Score\n","print(accuracy_score(y_test, y_pred))\n","\n","# ROC Average Accuracy Score\n","score = roc_auc_score(y_test, y_pred)\n","print(score)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["0.6753246753246753\n","0.618421052631579\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MTqXwPtM6-nd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"90429c93-39d9-4805-94d4-1d608de7db5e","executionInfo":{"status":"ok","timestamp":1589344023152,"user_tz":-420,"elapsed":804,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}}},"source":["conf_matrix = confusion_matrix(y_test, y_pred, labels=[1, 2])\n","conf_matrix"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[42, 15],\n","       [10, 10]])"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"1EMBPEtXCltO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":179},"outputId":"4baaedcd-d005-4b8e-d200-d35c510501cb","executionInfo":{"status":"ok","timestamp":1589344024252,"user_tz":-420,"elapsed":640,"user":{"displayName":"Refly A","photoUrl":"","userId":"02471401806927194179"}}},"source":["print(classification_report(y_test, y_pred))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           1       0.81      0.74      0.77        57\n","           2       0.40      0.50      0.44        20\n","\n","    accuracy                           0.68        77\n","   macro avg       0.60      0.62      0.61        77\n","weighted avg       0.70      0.68      0.69        77\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xI4Zx1yZHYHE","colab_type":"text"},"source":["Untuk prediksi **kasus yang positif** dengan model ini yang mana saya definisikan sebagai 1 adalah sebesar 81% untuk precision, lalu 74% untuk recall, dan 77% persen untuk f1-score\n","\n","Untuk prediksi **kasus yang negatif** dengan model ini yang mana saya definisikan sebagai 2 adalah sebesar 40% untuk precision, lalu 50% untuk recall, dan 44% persen untuk f1-score\n","\n","dengan nilai ROC yang didapat adalah 61%"]}]}